import os
from datetime import datetime
from pathlib import Path
import yaml
import time

from .utils import (
    extract_department_names,
    generate_field_work_log_schema,
    _match_department_id,
    _match_crop_id,
    _match_operation_id,
    create_annotated_field_work_log_schema,
)

from config import settings
from entities import Report, Department, Operation, Crop

from jinja2 import Template

from langchain_openai import ChatOpenAI

from langchain_core.messages import SystemMessage

import logging

logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ø–∞–π–ø–ª–∞–π–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
# –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: AUTO (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) –∏–ª–∏ DEMO
MODE = settings.mode
logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ report_solution –≤ —Ä–µ–∂–∏–º–µ: {MODE}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
llm_config_path = os.path.join(settings.configs_path, "models.yaml")
prompts_config_path = os.path.join(settings.configs_path, "prompts.yaml")

with open(Path(llm_config_path), mode="r", encoding="utf-8") as f:
    llm_config = yaml.safe_load(f)

with open(Path(prompts_config_path), mode="r", encoding="utf-8") as f:
    prompts_config = yaml.safe_load(f)

# –®–∞–±–ª–æ–Ω—ã –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ AUTO
AUTO_SYSTEM_PROMPT_TEMPLATE = Template(prompts_config.get("baseline_system_prompt_template"))
auto_schema_hints = prompts_config.get("baseline_schema_hints")
auto_few_shot_examples_str = prompts_config.get("baseline_few_shot_examples_str")

# –®–∞–±–ª–æ–Ω—ã –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ DEMO
DEMO_SYSTEM_PROMPT_TEMPLATE = Template(prompts_config.get("mode_demo_system_prompt_template"))
demo_schema_hints = prompts_config.get("demo_mode_schema_hints")
demo_few_shot_examples_str = prompts_config.get("demo_mode_few_shot_examples_str",)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
model = ChatOpenAI(
    model=llm_config.get("llm_model_name"),
    openai_api_key=settings.llm_api_key,
    openai_api_base=settings.llm_api_base_url,
    temperature=llm_config.get("llm_temperature", 0.3),
    max_retries=30,
    timeout=90,
)
logger.info(f"ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å: {llm_config.get('llm_model_name')}")


async def solve_reports(
        message_id: int,
        message_text: str,
        message_created_at: datetime,
        departments: list[Department],
        crops: list[Crop],
        operations: list[Operation],
) -> list[Report]:
    start_time = time.time()
    logger.info(f"‚è≥ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ID: {message_id}")
    logger.info(f"   –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(message_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    logger.info(f"   –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤: {message_text[:100].replace(chr(10), ' ')}...")
    logger.info(f"   –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {message_created_at}")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–µ–Ω–∞ –¥–ª—è Literal-—Ç–∏–ø–æ–≤
    department_names = extract_department_names(departments)
    logger.info(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {department_names}")
    crop_names = tuple(crop.crop_name for crop in crops)
    logger.info(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É–ª—å—Ç—É—Ä—ã: {crop_names}")
    operation_names = tuple(op.operation_name for op in operations)
    logger.info(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation_names}")

    logger.info(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –≤ –ë–î:")
    logger.info(f"   –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {len(departments)} (–≤ –ü–£: {len(department_names)})")
    logger.info(f"   –ö—É–ª—å—Ç—É—Ä—ã: {len(crops)}")
    logger.info(f"   –û–ø–µ—Ä–∞—Ü–∏–∏: {len(operations)}")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if MODE == "DEMO":
        logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∂–∏–º DEMO —Å –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏")
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ö–µ–º—É —Å –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ DEMO
            FieldWorkEntryAnnotated, FieldWorkLogAnnotated = create_annotated_field_work_log_schema(
                department_names=department_names,
                operations=operation_names,
                crops=crop_names,
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–∂–∏–º–∞ DEMO
            system_prompt = DEMO_SYSTEM_PROMPT_TEMPLATE.render(
                json_schema=FieldWorkLogAnnotated.model_json_schema(),
                few_shot_examples=demo_few_shot_examples_str,
                message=message_text,
                schema_hints=demo_schema_hints,
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
            logger.info(f"üß† –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏ {llm_config.get('llm_model_name')}")
            model_start_time = time.time()
            field_work_log = await model.with_structured_output(FieldWorkLogAnnotated).ainvoke(
                [SystemMessage(content=system_prompt)]
            )
            model_end_time = time.time()
            logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω. –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {model_end_time - model_start_time:.2f} —Å–µ–∫.")
            logger.info(f"üìù –í—ã–¥–µ–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(field_work_log.entries)}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            for i, entry in enumerate(field_work_log.entries):
                logger.info(f"  üìÑ –ó–∞–ø–∏—Å—å #{i+1}:")
                
                dept_status = entry.department_name.status
                dept_value = entry.department_name.value
                logger.info(f"    üè¢ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: [{dept_status}] {dept_value}")
                if dept_status != 'valid':
                    if hasattr(entry.department_name, 'explanation'):
                        logger.info(f"       üìù –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {entry.department_name.explanation}")
                
                op_status = entry.operation.status
                op_value = entry.operation.value
                logger.info(f"    üî® –û–ø–µ—Ä–∞—Ü–∏—è: [{op_status}] {op_value}")
                if op_status != 'valid':
                    if hasattr(entry.operation, 'explanation'):
                        logger.info(f"       üìù –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {entry.operation.explanation}")
                
                crop_status = entry.crop.status
                crop_value = entry.crop.value
                logger.info(f"    üå± –ö—É–ª—å—Ç—É—Ä–∞: [{crop_status}] {crop_value}")
                if crop_status != 'valid':
                    if hasattr(entry.crop, 'explanation'):
                        logger.info(f"       üìù –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {entry.crop.explanation}")
                
                logger.info(f"    üìä –ü–ª–æ—â–∞–¥—å –¥–µ–Ω—å/–≤—Å–µ–≥–æ: {entry.processed_area_day}/{entry.processed_area_total} –≥–∞")
                if entry.yield_kg_day or entry.yield_kg_total:
                    logger.info(f"    üìà –£—Ä–æ–∂–∞–π –¥–µ–Ω—å/–≤—Å–µ–≥–æ: {entry.yield_kg_day or '–ù–µ—Ç'}/{entry.yield_kg_total or '–ù–µ—Ç'} –∫–≥")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            reports = []
            for entry in field_work_log.entries:
                # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
                department_id = None
                department_raw = None
                department_predicted = None
                
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—è note
                explanations = []
                
                if entry.department_name.status == 'valid':
                    try:
                        department_id = _match_department_id(entry.department_name.value, departments)
                        logger.info(f"   üíº –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ '{entry.department_name.value}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ valid, ID: {department_id}")
                    except ValueError as e:
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ raw
                        logger.warning(f"   ‚ö†Ô∏è –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ '{entry.department_name.value}' –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ valid, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
                        department_raw = entry.department_name.value
                        department_predicted = entry.department_name.value
                        explanations.append(f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {str(e)}")
                elif entry.department_name.status == 'predict':
                    department_raw = None
                    department_predicted = entry.department_name.value
                    explanations.append(f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {entry.department_name.explanation}")
                    logger.info(f"   üîç –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ '{entry.department_name.value}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ predict: {entry.department_name.explanation}")
                else:  # 'raw'
                    department_raw = entry.department_name.value
                    department_predicted = None
                    explanations.append(f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {entry.department_name.explanation}")
                    logger.info(f"   ‚ö†Ô∏è –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ '{department_raw}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ raw —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º: {entry.department_name.explanation}")
                
                operation_id = None
                operation_raw = None
                operation_predicted = None
                
                if entry.operation.status == 'valid':
                    try:
                        operation_id = _match_operation_id(entry.operation.value, operations)
                        logger.info(f"   üíº –û–ø–µ—Ä–∞—Ü–∏—è '{entry.operation.value}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ valid, ID: {operation_id}")
                    except ValueError as e:
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ raw
                        logger.warning(f"   ‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è '{entry.operation.value}' –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ valid, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
                        operation_raw = entry.operation.value
                        operation_predicted = entry.operation.value
                        explanations.append(f"–û–ø–µ—Ä–∞—Ü–∏—è: {str(e)}")
                elif entry.operation.status == 'predict':
                    operation_raw = None
                    operation_predicted = entry.operation.value
                    explanations.append(f"–û–ø–µ—Ä–∞—Ü–∏—è: {entry.operation.explanation}")
                    logger.info(f"   üîç –û–ø–µ—Ä–∞—Ü–∏—è '{entry.operation.value}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ predict: {entry.operation.explanation}")
                else:  # 'raw'
                    operation_raw = entry.operation.value
                    operation_predicted = None
                    explanations.append(f"–û–ø–µ—Ä–∞—Ü–∏—è: {entry.operation.explanation}")
                    logger.info(f"   ‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è '{operation_raw}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ raw —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º: {entry.operation.explanation}")
                
                crop_id = None
                crop_raw = None
                crop_predicted = None
                
                if entry.crop.status == 'valid':
                    try:
                        crop_id = _match_crop_id(entry.crop.value, crops)
                        logger.info(f"   üíº –ö—É–ª—å—Ç—É—Ä–∞ '{entry.crop.value}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ valid, ID: {crop_id}")
                    except ValueError as e:
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ raw
                        logger.warning(f"   ‚ö†Ô∏è –ö—É–ª—å—Ç—É—Ä–∞ '{entry.crop.value}' –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ valid, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
                        crop_raw = entry.crop.value
                        crop_predicted = entry.crop.value
                        explanations.append(f"–ö—É–ª—å—Ç—É—Ä–∞: {str(e)}")
                elif entry.crop.status == 'predict':
                    crop_raw = None
                    crop_predicted = entry.crop.value
                    explanations.append(f"–ö—É–ª—å—Ç—É—Ä–∞: {entry.crop.explanation}")
                    logger.info(f"   üîç –ö—É–ª—å—Ç—É—Ä–∞ '{entry.crop.value}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ predict: {entry.crop.explanation}")
                else:  # 'raw'
                    crop_raw = entry.crop.value
                    crop_predicted = None
                    explanations.append(f"–ö—É–ª—å—Ç—É—Ä–∞: {entry.crop.explanation}")
                    logger.info(f"   ‚ö†Ô∏è –ö—É–ª—å—Ç—É—Ä–∞ '{crop_raw}' –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ raw —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º: {entry.crop.explanation}")
                
                # –°–æ–∑–¥–∞–µ–º note –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
                note = None
                if explanations:
                    note = "; ".join(explanations)
                    logger.info(f"   üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–º–µ—Ç–∫–∞: {note}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ ID –Ω–µ None
                if department_id is None and operation_id is None and crop_id is None:
                    logger.warning(f"   ‚ö†Ô∏è –ù–∏ –æ–¥–Ω–æ –ø–æ–ª–µ –Ω–µ –∏–º–µ–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ ID, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏ –∏–∑ –ø–µ—Ä–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π")
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–≥–ª—É—à–µ–∫, –µ—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω ID –Ω–µ –Ω–∞–π–¥–µ–Ω
                    if not department_id and departments:
                        department_id = departments[0].id
                        logger.info(f"   üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è department_id: {department_id}")
                    if not operation_id and operations:
                        operation_id = operations[0].id
                        logger.info(f"   üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è operation_id: {operation_id}")
                    if not crop_id and crops:
                        crop_id = crops[0].id
                        logger.info(f"   üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è crop_id: {crop_id}")
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–∏–ª–æ–≥—Ä–∞–º–º–æ–≤ –≤ —Ü–µ–Ω—Ç–Ω–µ—Ä—ã (–¥–µ–ª–∏–º –Ω–∞ 100)
                day_yield = None
                cumulative_yield = None
                
                if entry.yield_kg_day is not None:
                    day_yield = entry.yield_kg_day / 100
                    logger.info(f"   üìä –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–µ–Ω—å, –∫–≥ -> —Ü–Ω: {entry.yield_kg_day} -> {day_yield}")
                    
                if entry.yield_kg_total is not None:
                    cumulative_yield = entry.yield_kg_total / 100
                    logger.info(f"   üìä –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Å–µ–≥–æ, –∫–≥ -> —Ü–Ω: {entry.yield_kg_total} -> {cumulative_yield}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ day_area, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
                day_area = entry.processed_area_day
                if day_area is None or day_area <= 0:
                    day_area = 1
                    logger.warning(f"   ‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ day_area: {entry.processed_area_day}, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ 1")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º cumulative_area –∫–∞–∫ None, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ processed_area_total = None
                cumulative_area = entry.processed_area_total
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Report —Å —É—á–µ—Ç–æ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
                report = Report(
                    worked_on=message_created_at.date(),
                    chat_message_id=message_id,
                    department_id=department_id,
                    operation_id=operation_id,
                    crop_id=crop_id,
                    department_raw=department_raw,
                    operation_raw=operation_raw,
                    crop_raw=crop_raw,
                    department_predicted=department_predicted,
                    operation_predicted=operation_predicted,
                    crop_predicted=crop_predicted,
                    note=note,
                    day_area=day_area,
                    cumulative_area=cumulative_area,
                    day_yield=day_yield,
                    cumulative_yield=cumulative_yield,
                )
                logger.info(f"   ‚úÖ –û–±—ä–µ–∫—Ç Report —Å–æ–∑–¥–∞–Ω")
                reports.append(report)
                
            logger.info(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π Report: {len(reports)}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ DEMO: {e}", exc_info=True)
            raise
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º AUTO
        logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º AUTO")
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é Pydantic-—Å—Ö–µ–º—É
            FieldWorkLog = generate_field_work_log_schema(
                department_names=department_names,
                operations=operation_names,
                crops=crop_names,
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–∂–∏–º–∞ AUTO
            system_prompt = AUTO_SYSTEM_PROMPT_TEMPLATE.render(
                json_schema=FieldWorkLog.model_json_schema(),
                few_shot_examples=auto_few_shot_examples_str,
                message=message_text,
                schema_hints=auto_schema_hints,
            )
            
            logger.info(f"üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–ª–∏–Ω–∞: {len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
            logger.info(f"üß† –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏ {llm_config.get('llm_model_name')}")
            model_start_time = time.time()
            field_work_log = await model.with_structured_output(FieldWorkLog).ainvoke(
                [SystemMessage(content=system_prompt)]
            )
            model_end_time = time.time()
            logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω. –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {model_end_time - model_start_time:.2f} —Å–µ–∫.")
            logger.info(f"üìù –í—ã–¥–µ–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(field_work_log.entries)}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            for i, entry in enumerate(field_work_log.entries):
                logger.info(f"  üìÑ –ó–∞–ø–∏—Å—å #{i+1}:")
                logger.info(f"    üè¢ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {entry.department_name}")
                logger.info(f"    üî® –û–ø–µ—Ä–∞—Ü–∏—è: {entry.operation}")
                logger.info(f"    üå± –ö—É–ª—å—Ç—É—Ä–∞: {entry.crop}")
                logger.info(f"    üìä –ü–ª–æ—â–∞–¥—å –¥–µ–Ω—å/–≤—Å–µ–≥–æ: {entry.processed_area_day}/{entry.processed_area_total} –≥–∞")
                if entry.yield_kg_day or entry.yield_kg_total:
                    logger.info(f"    üìà –£—Ä–æ–∂–∞–π –¥–µ–Ω—å/–≤—Å–µ–≥–æ: {entry.yield_kg_day or '–ù–µ—Ç'}/{entry.yield_kg_total or '–ù–µ—Ç'} –∫–≥")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            reports = []
            for entry in field_work_log.entries:
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—è note
                explanations = []
                
                try:
                    department_id = _match_department_id(entry.department_name, departments)
                    logger.info(f"   üîç –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: {entry.department_name} -> ID: {department_id}")
                    department_raw = None
                    department_predicted = None
                except ValueError as e:
                    department_id = None
                    department_raw = entry.department_name
                    department_predicted = entry.department_name
                    explanations.append(f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {str(e)}")
                    logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {e}")
                
                try:
                    operation_id = _match_operation_id(entry.operation, operations)
                    logger.info(f"   üîç –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: {entry.operation} -> ID: {operation_id}")
                    operation_raw = None
                    operation_predicted = None
                except ValueError as e:
                    operation_id = None
                    operation_raw = entry.operation
                    operation_predicted = entry.operation
                    explanations.append(f"–û–ø–µ—Ä–∞—Ü–∏—è: {str(e)}")
                    logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
                
                try:
                    crop_id = _match_crop_id(entry.crop, crops)
                    logger.info(f"   üîç –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: {entry.crop} -> ID: {crop_id}")
                    crop_raw = None
                    crop_predicted = None
                except ValueError as e:
                    crop_id = None
                    crop_raw = entry.crop
                    crop_predicted = entry.crop
                    explanations.append(f"–ö—É–ª—å—Ç—É—Ä–∞: {str(e)}")
                    logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫—É–ª—å—Ç—É—Ä—ã: {e}")
                
                # –°–æ–∑–¥–∞–µ–º note –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
                note = None
                if explanations:
                    note = "; ".join(explanations)
                    logger.info(f"   üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–º–µ—Ç–∫–∞: {note}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ ID –Ω–µ None
                if department_id is None and operation_id is None and crop_id is None:
                    logger.warning(f"   ‚ö†Ô∏è –ù–∏ –æ–¥–Ω–æ –ø–æ–ª–µ –Ω–µ –∏–º–µ–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ ID, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏ –∏–∑ –ø–µ—Ä–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π")
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–≥–ª—É—à–µ–∫, –µ—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω ID –Ω–µ –Ω–∞–π–¥–µ–Ω
                    if not department_id and departments:
                        department_id = departments[0].id
                        logger.info(f"   üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è department_id: {department_id}")
                    if not operation_id and operations:
                        operation_id = operations[0].id
                        logger.info(f"   üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è operation_id: {operation_id}")
                    if not crop_id and crops:
                        crop_id = crops[0].id
                        logger.info(f"   üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è crop_id: {crop_id}")
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–∏–ª–æ–≥—Ä–∞–º–º–æ–≤ –≤ —Ü–µ–Ω—Ç–Ω–µ—Ä—ã (–¥–µ–ª–∏–º –Ω–∞ 100)
                day_yield = None
                cumulative_yield = None
                
                if entry.yield_kg_day is not None:
                    day_yield = entry.yield_kg_day / 100
                    logger.info(f"   üìä –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–µ–Ω—å, –∫–≥ -> —Ü–Ω: {entry.yield_kg_day} -> {day_yield}")
                    
                if entry.yield_kg_total is not None:
                    cumulative_yield = entry.yield_kg_total / 100
                    logger.info(f"   üìä –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Å–µ–≥–æ, –∫–≥ -> —Ü–Ω: {entry.yield_kg_total} -> {cumulative_yield}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ day_area, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
                day_area = entry.processed_area_day
                if day_area is None or day_area <= 0:
                    day_area = 1
                    logger.warning(f"   ‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ day_area: {entry.processed_area_day}, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ 1")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º cumulative_area –∫–∞–∫ None, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ processed_area_total = None
                cumulative_area = entry.processed_area_total
                
                report = Report(
                    worked_on=message_created_at.date(),
                    chat_message_id=message_id,
                    department_id=department_id,
                    operation_id=operation_id,
                    crop_id=crop_id,
                    department_raw=department_raw,
                    operation_raw=operation_raw,
                    crop_raw=crop_raw,
                    department_predicted=department_predicted,
                    operation_predicted=operation_predicted,
                    crop_predicted=crop_predicted,
                    note=note,
                    day_area=day_area,
                    cumulative_area=cumulative_area,
                    day_yield=day_yield,
                    cumulative_yield=cumulative_yield,
                )
                logger.info(f"   ‚úÖ –û–±—ä–µ–∫—Ç Report —Å–æ–∑–¥–∞–Ω —Å ID: {report.id}")
                reports.append(report)
                
            logger.info(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π Report: {len(reports)}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ AUTO: {e}", exc_info=True)
            raise

    end_time = time.time()
    logger.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {end_time - start_time:.2f} —Å–µ–∫.")
    return reports
